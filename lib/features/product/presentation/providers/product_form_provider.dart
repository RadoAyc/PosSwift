import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:myapp/features/product/domain/entities/category_entity.dart';
import 'package:myapp/features/product/domain/entities/product_entity.dart';
import 'package:myapp/features/product/domain/entities/supplier_entity.dart';
import 'package:myapp/features/product/domain/entities/warehouse_entity.dart';
import 'package:myapp/features/product/domain/services/category_service.dart';
import 'package:myapp/features/product/domain/services/supplier_service.dart';
import 'package:myapp/features/product/domain/services/warehouse_service.dart';
import 'package:myapp/features/product/domain/usecases/add_product_usecase.dart';
import 'package:myapp/l10n/app_localizations.dart';

class ProductFormProvider extends ChangeNotifier {
  final AddProductUseCase _addProductUseCase;
  final CategoryService _categoryService;
  final SupplierService _supplierService;
  final WarehouseService _warehouseService;

  // Form state
  final GlobalKey<FormState> formKey = GlobalKey<FormState>();
  TextEditingController barcodeController = TextEditingController();
  TextEditingController nameController = TextEditingController();
  TextEditingController descriptionController = TextEditingController();
  TextEditingController quantityController = TextEditingController();
  TextEditingController priceController = TextEditingController();
  CategoryEntity? selectedCategory;
  SupplierEntity? selectedSupplier;
  WarehouseEntity? selectedWarehouse;
  Uint8List? selectedImage;

  // Data for dropdowns
  List<CategoryEntity> categories = [];
  List<SupplierEntity> suppliers = [];
  List<WarehouseEntity> warehouses = [];

  bool _isLoading = false;
  bool get isLoading => _isLoading;

  ProductFormProvider(
    this._addProductUseCase,
    this._categoryService,
    this._supplierService,
    this._warehouseService,
  ) {
    loadInitialData();
  }

  Future<void> loadInitialData() async {
    _isLoading = true;
    notifyListeners();
    try {
      categories = await _categoryService.getCategories();
      suppliers = await _supplierService.getSuppliers();
      warehouses = await _warehouseService.getWarehouses();
    } catch (e) {
      print('Error loading initial data: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  void setProduct(ProductEntity product) {
    barcodeController.text = product.barcode;
    nameController.text = product.name;
    descriptionController.text = product.description ?? '';
    quantityController.text = product.quantity.toString();
    priceController.text = product.price.toString();
    selectedCategory = product.category;
    selectedSupplier = product.supplier;
    selectedWarehouse = product.warehouse;
    // Assuming product.image is a String path, you might need to load it into Uint8List
    // This part is left as a placeholder for actual image loading logic
    // selectedImage = product.image;
    notifyListeners();
  }

  void setSelectedCategory(CategoryEntity? category) {
    selectedCategory = category;
    notifyListeners();
  }

  void setSelectedSupplier(SupplierEntity? supplier) {
    selectedSupplier = supplier;
    notifyListeners();
  }

  void setSelectedWarehouse(WarehouseEntity? warehouse) {
    selectedWarehouse = warehouse;
    notifyListeners();
  }

  void setSelectedImage(Uint8List? imageBytes) {
    selectedImage = imageBytes;
    notifyListeners();
  }

  Future<bool> submit() async {
    if (!formKey.currentState!.validate()) {
      return false;
    }

    _isLoading = true;
    notifyListeners();

    try {
      final newProduct = ProductEntity(
        id: '', // ID will be generated by the backend/database
        barcode: barcodeController.text,
        name: nameController.text,
        description: descriptionController.text,
        price: double.parse(priceController.text),
        quantity: int.parse(quantityController.text),
        category: selectedCategory!,
        supplier: selectedSupplier!,
        warehouse: selectedWarehouse!,
        image: null, // Placeholder - needs conversion from Uint8List to String
      );

      await _addProductUseCase(newProduct);
      _isLoading = false;
      notifyListeners();
      return true;
    } catch (e) {
      print('Error submitting form: $e');
      _isLoading = false;
      notifyListeners();
      return false;
    }
  }

  // --- Validation ---
  String? validateBarcode(String? value, AppLocalizations local) {
    if (value == null || value.isEmpty) {
      return local.atLeastOneBarcodeRequired;
    }
    return null;
  }

  String? validateName(String? value, AppLocalizations local) {
    if (value == null || value.isEmpty) {
      return local.productNameRequired;
    }
    return null;
  }

  String? validatePrice(String? value, AppLocalizations local) {
    if (value == null || value.isEmpty) {
      return local.sellingPriceRequired;
    }
    if (double.tryParse(value) == null) {
      return local.sellingPriceInvalid;
    }
    return null;
  }

  String? validateQuantity(String? value, AppLocalizations local) {
    if (value == null || value.isEmpty) {
      return local.quantityRequired;
    }
    if (int.tryParse(value) == null) {
      return local.quantityInvalid;
    }
    return null;
  }

  String? validateCategory(CategoryEntity? value, AppLocalizations local) {
    if (value == null) {
      return local.categoryRequired;
    }
    return null;
  }

  String? validateSupplier(SupplierEntity? value, AppLocalizations local) {
    if (value == null) {
      return local.supplierRequired;
    }
    return null;
  }

  String? validateWarehouse(WarehouseEntity? value, AppLocalizations local) {
    if (value == null) {
      return local.warehouseRequired;
    }
    return null;
  }
}
