import 'dart:io';
import 'package:flutter/material.dart';
import 'package:myapp/features/product/domain/entities/product_entity.dart';
import 'package:myapp/features/product/domain/entities/supplier_entity.dart';
import 'package:myapp/features/product/domain/usecases/find_product_by_barcode_usecase.dart';
import 'package:myapp/features/product/domain/usecases/upsert_product_usecase.dart';
import 'package:myapp/features/product/presentation/pages/add_product_page.dart';
import 'package:myapp/features/purchase/domain/entities/purchase_invoice_entity.dart';
import 'package:myapp/features/purchase/domain/entities/purchase_item_entity.dart';
import 'package:myapp/features/purchase/domain/services/purchase_service.dart';
import 'package:myapp/l10n/app_localizations.dart';

class PurchaseFormProvider extends ChangeNotifier {
  final PurchaseService _purchaseService;
  final UpsertProductUseCase _upsertProductUseCase;
  final FindProductByBarcodeUseCase _findProductByBarcodeUseCase;

  // Form state
  final GlobalKey<FormState> formKey = GlobalKey<FormState>();
  TextEditingController invoiceNumberController = TextEditingController();
  TextEditingController invoiceDateController = TextEditingController();
  SupplierEntity? selectedSupplier;
  List<PurchaseProductRowProvider> productRows = [];
  File? selectedAttachment;
  TextEditingController totalAmountController = TextEditingController();
  TextEditingController notesController = TextEditingController();

  // Data for dropdowns
  List<SupplierEntity> suppliers = []; // This should be loaded from a service

  bool _isLoading = false;
  bool get isLoading => _isLoading;

  PurchaseFormProvider(this._purchaseService, this._upsertProductUseCase,
      this._findProductByBarcodeUseCase);

  void addProductRow() {
    productRows.add(PurchaseProductRowProvider());
    notifyListeners();
  }

  void removeProductRow(PurchaseProductRowProvider productRow) {
    productRows.remove(productRow);
    notifyListeners();
  }

  void onProductSelected(
      PurchaseProductRowProvider productRow, ProductEntity? product) {
    productRow.setProduct(product);
    notifyListeners();
  }

  void setSelectedSupplier(SupplierEntity? supplier) {
    selectedSupplier = supplier;
    notifyListeners();
  }

  void setSelectedAttachment(File? attachment) {
    selectedAttachment = attachment;
    notifyListeners();
  }

  Future<void> selectInvoiceDate(BuildContext context) async {
    final pickedDate = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime(2101),
    );
    if (pickedDate != null) {
      invoiceDateController.text =
          pickedDate.toIso8601String().split('T').first;
    }
  }

  Future<void> handleScannedBarcode(
      BuildContext context, String barcode, PurchaseProductRowProvider row) async {
    final result = await _findProductByBarcodeUseCase(barcode);
    result.fold(
      (failure) {
        // This means the product was not found, so we navigate to the AddProductPage
        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) => AddProductPage(
              product: ProductEntity(
                barcode: barcode,
                name: '',
                price: 0,
                quantity: 0,
                category: null,
                supplier: null,
                warehouse: null,
                id: '',
              ),
              onProductSaved: () {
                // After saving, we need to refresh the product list in the invoice
                // This is a bit tricky, as we need to pass the new product back
                // For now, let's just pop the page
                Navigator.of(context).pop();
              },
            ),
          ),
        );
      },
      (product) {
        // Product was found, so we update the row
        onProductSelected(row, product);
      },
    );
  }

  Future<bool> submit() async {
    if (!formKey.currentState!.validate()) {
      return false;
    }

    _isLoading = true;
    notifyListeners();

    try {
      final purchaseItems = productRows
          .map(
            (row) => PurchaseItemEntity(
              product: row.selectedProduct!,
              quantity: int.parse(row.quantityController.text),
              price: double.parse(row.priceController.text),
            ),
          )
          .toList();

      final invoice = PurchaseInvoiceEntity(
        id: '', // Generated by backend
        invoiceNumber: invoiceNumberController.text,
        date: DateTime.parse(invoiceDateController.text),
        supplier: selectedSupplier!,
        items: purchaseItems,
        totalAmount: double.parse(totalAmountController.text),
        attachment: selectedAttachment?.path,
        notes: notesController.text,
      );

      await _purchaseService.addPurchaseInvoice(invoice);
      _isLoading = false;
      notifyListeners();
      return true;
    } catch (e) {
      print('Error submitting purchase: $e');
      _isLoading = false;
      notifyListeners();
      return false;
    }
  }

  // --- Validation ---
  String? validateInvoiceNumber(String? value, AppLocalizations local) {
    if (value == null || value.isEmpty) {
      return local.invoiceNumberLabel; // Using the label as a placeholder for the required message
    }
    return null;
  }

  String? validateInvoiceDate(String? value, AppLocalizations local) {
    if (value == null || value.isEmpty) {
      return local.invoiceDateLabel; // Using the label as a placeholder for the required message
    }
    return null;
  }

  String? validateSupplier(SupplierEntity? value, AppLocalizations local) {
    if (value == null) {
      return local.supplierRequired;
    }
    return null;
  }

  String? validateTotalAmount(String? value, AppLocalizations local) {
    if (value == null || value.isEmpty) {
      return local.purchasePriceRequired;
    }
    if (double.tryParse(value) == null) {
      return local.purchasePriceInvalid;
    }
    return null;
  }
}

class PurchaseProductRowProvider extends ChangeNotifier {
  ProductEntity? selectedProduct;
  TextEditingController quantityController = TextEditingController();
  TextEditingController priceController = TextEditingController();

  void setProduct(ProductEntity? product) {
    selectedProduct = product;
    if (product != null) {
      priceController.text = product.price.toString();
    }
    notifyListeners();
  }
}
